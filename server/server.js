// Generated by CoffeeScript 1.10.0
(function() {
  var DB_URI, MongoClient, OAuth2Strategy, ObjectID, PORT, Server, _, app, auth, bodyParser, co, createSampleSnippets, express, fetchRoot, flash, http, passport, ref, session;

  Server = require('http').Server;

  _ = require('underscore');

  MongoClient = require('mongodb').MongoClient;

  co = require('co');

  ObjectID = require('mongodb').ObjectID;

  flash = require('connect-flash');

  bodyParser = require('body-parser');

  express = require('express');

  session = require('express-session');

  passport = require('passport');

  passport = require('passport');

  OAuth2Strategy = require('passport-google-oauth').OAuth2Strategy;

  auth = passport.authenticate.bind(passport, 'google');

  app = express();

  http = Server(app);

  PORT = (ref = process.env.PORT) != null ? ref : 3000;

  DB_URI = process.env.NODE_ENV === 'development' ? 'mongodb://localhost:27017/ripline' : process.env.MONGODB_URI;

  app.set('view engine', 'pug');

  app.use(session({
    secret: 'this is probably useless',
    resave: true,
    saveUninitialized: true
  }));

  app.use(passport.initialize());

  app.use(passport.session());

  app.use(flash());

  app.use(bodyParser.urlencoded({
    extended: true
  }));

  app.use(bodyParser.json());

  app.use(express["static"]('public'));

  co(function*() {
    var db, failureRedirect, google_verify, opts, scope, snippets;
    db = (yield MongoClient.connect(DB_URI));
    snippets = db.collection('snippets');
    app.post('/add/submit', function(req, res) {
      if (!req.isAuthenticated()) {
        return;
      }
      return co(function*() {
        var _id, description, doc, ref1, tags, text;
        ref1 = req.body, text = ref1.text, description = ref1.description, tags = ref1.tags, _id = ref1._id;
        doc = {
          text: text,
          description: description,
          tags: tags,
          _id: _id
        };
        doc.uid = req.user.id;
        doc.user = req.user.displayName;
        doc._id = _id !== '' ? ObjectID(_id) : null;
        _id = (yield snippets.save(doc)).insertedId;
        return res.status(200).json({
          success: 1
        });
      });
    });
    app.post('/star/:_id', function(req, res) {
      return co(function*() {
        var result, star;
        star = {
          user: "placeholder"
        };
        return result = (yield snippets.update({
          _id: ObjectID(req.params._id)
        }, {
          $push: {
            star: star
          }
        }));
      });
    });
    app.get('/success', function(req, res) {
      return res.render("index", {
        success: true
      });
    });
    app.get('/', function(req, res) {
      return res.render("index");
    });
    app.get('/view/:_id', function(req, res) {
      return co(function*() {
        var _id, snip;
        _id = ObjectID(req.params._id);
        snip = (yield snippets.findOne({
          _id: _id
        }));
        return res.render('snip', snip);
      });
    });
    app.get('/add/:_id*?', function(req, res) {
      var _id;
      _id = req.params._id;
      if (!req.isAuthenticated()) {
        req.session.redirect = req.originalUrl;
        res.redirect('/auth/google');
        return;
      }
      return co(function*() {
        var snip;
        if (_id) {
          snip = (yield snippets.findOne({
            _id: ObjectID(_id)
          }));
          snip.tags = snip.tags.join(" ");
        }
        return res.render("add", snip != null ? snip : {});
      });
    });
    app.get('/search/:query', function(req, res) {
      return co(function*() {
        var qpieces, search, search_results;
        qpieces = req.params.query.split(/\s+/);
        search = {
          tags: {
            $all: qpieces
          }
        };
        search_results = (yield snippets.find(search).toArray());
        return res.status(200).json(search_results);
      });
    });
    opts = {
      clientID: '878395270279-mdaav2ish6u6ugpum2ojkc42h9oa6khp.apps.googleusercontent.com',
      clientSecret: '9LE1fFBUHFfl-40hww5kNmsH',
      callbackURL: 'http://localhost:8080/auth/google/callback'
    };
    google_verify = function(accessToken, refreshToken, profile, done) {
      console.log("Profile: ", profile);
      return process.nextTick(function() {
        return done(null, profile);
      });
    };
    passport.use(new OAuth2Strategy(opts, google_verify));
    scope = ['https://www.googleapis.com/auth/plus.login'];
    app.get('/auth/google', auth({
      scope: scope
    }));
    passport.serializeUser(function(user, done) {
      return done(null, user);
    });
    passport.deserializeUser(function(user, done) {
      return done(null, user);
    });
    failureRedirect = '/';
    app.get('/auth/google/callback', auth({
      failureRedirect: failureRedirect
    }), function(req, res) {
      console.log("Auth completed: ", req.user);
      res.redirect(req.session.redirect);
      return delete req.session.redirect;
    });
    if (process.env.NODE_ENV === "development") {
      if (snippets.findOne() == null) {
        createSampleSnippets(db);
      }
    }
  })["catch"](function(err) {
    console.log(err.message);
    return console.log(err.stack);
  });

  fetchRoot = function(req, res) {
    return res.sendFile(__dirname + '/public/index.html');
  };

  createSampleSnippets = function(db) {
    return co(function*() {
      console.log("Creating sample snippets");
      return (yield db.collection("snippets").insertMany([
        {
          text: "A simple test snippet",
          description: "This is just a simple test snippet",
          tags: ["english"]
        }, {
          text: "console.log($1);",
          description: "Short javascript console.log",
          tags: ["javascript"]
        }, {
          text: "Lorem ipsum dolor sit amet, consectetur adipiscing elit.\nDonec id sapien nisl. Nam sit amet convallis erat, finibus\nvehicula metus. Pellentesque ullamcorper luctus lacus eget\nblandit. Pellentesque habitant morbi tristique senectus et\nnetus et malesuada fames ac turpis egestas. Cras ipsum est,\ndictum nec elit a, condimentum viverra nulla. Integer\nvenenatis congue arcu vitae lacinia. Vestibulum tempus eu\nlibero varius posuere. Mauris feugiat massa nibh, quis\nullamcorper sapien mattis vitae. Pellentesque non eleifend\norci. Integer neque ex, vestibulum vel arcu eget,\nvestibulum convallis mauris. Sed pretium odio sit amet\ntortor mollis, eu eleifend lacus rutrum. Curabitur sit amet\npharetra est. Curabitur feugiat libero lorem, a finibus\nsapien cursus eget.",
          description: "Lorem Ipsum",
          tags: ["lorem", "ipsum"]
        }
      ]));
    });
  };

  http.listen(PORT, function() {
    return console.log("listening on http://localhost:" + PORT);
  });

}).call(this);
